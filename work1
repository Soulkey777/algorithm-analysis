
#include<algorithm>
#include<deque>
#include<set>
#include<stack>
#include <iostream>
#include <string>
#include<cctype>
#include<iomanip>
#include<vector>
#include<cmath>
#include <cstdio>
#include <cstring>
using namespace std;
const int maxn=1005;
const int INF=0x3f3f3f3f;
int p[maxn]; //储存父节点
int matrix[maxn][maxn];//邻接矩阵
int d[maxn]; //到生成树的最短距离
int visited[maxn];//是否加入集合中
int n,m;
//初始化
void init()
{
    memset (visited,0,sizeof(visited));
    memset (p,-1,sizeof(p));
    for (int i=1;i<=n;i++)
        for (int j=1;j<=n;j++)
             i==j? matrix[i][j]==0:matrix[i][j]=INF;
}
void prim()
{
    //以1作为根节点
    for (int i=1;i<=n;i++)
    {
        if(matrix[1][i]!=INF)
            p[i]=1;
        d[i]=matrix[1][i];
    }
    while (1)
    {
        int maxx=INF;
        int u=-1;
        //找到距离生成树最短距离的节点
        for (int i=1;i<=n;i++)
        {
            if(!visited[i]&&d[i]<maxx)
            {
                maxx=d[i];
                u=i;
            }
        }
        if(u==-1)
            break;
        //将选出的节点纳入集合
        visited[u]=1;
        //更新该节点影响的节点
        for (int i=1;i<=n;i++)
        {
            if(!visited[i]&&d[i]>matrix[u][i])
            {
                d[i]=matrix[u][i];
                p[i]=u;
            }
        }
    }
    int sum=0;
    for (int i=1;i<=n;i++)
        if(p[i]==-1)
        {
            printf("不存在最小生成树\n");
            return ;
        }
        else
            sum+=d[i];
        printf("最短生成树的长度为%d\n",sum);
        return ;
}
int main()
{
   int x, y, vi;
    cin >> n >> m;
    init();
    for (int i = 0; i < m;i++){
        cin >> x >> y >> vi;
        matrix[x][y] = matrix[y][x] = vi;
    }
    prim();
    return 0;
}
